@startuml CAIT

class CAIT {
    Instructor-facing wrapper for internal CAIT methods.
    Defers most of its functionality to TreeMatcher.
    Also contains methods for parsing Strings into JavaParser Nodes.
    ==
    .. Static methods ..
    + parseFile(String) -> Node
    + parseFile(Path) -> Node
    + findMatches(String, String) -> List<Node>
}

class TreeMatcher {
    Drives the AST matching algorithm.
    Can shallow match (attributes only) or deep match (recursive descent).
    ==
    .. (Static?) methods ..
    + findMatches(Node, Node) -> List<Match>
    + shallowMatch(Node, Node) -> boolean
    + deepMatch(Node, Node) -> List<Match>
    + merge(list1: List<Match>, list2: List<Match>): List<Match>
    + buildAST(string: String): CompilationUnit
    + anyNodeMatch(node1: Node, node2: Node): List<Match>
    + metasMatch(node1: Node, node2: Node): Boolean
    --
    TODO: Should this be static (like System) or instanced (like Scanner)?
}

class Match {
    Represents one possible mapping of the pattern node to the source node.
    ==
    .. Fields ..
    - studentNode: Node
    - instructorNode: Node
    - subtree: List<Node>
    - symbolTable: SymbolTable
    .. Methods ..
    + getSymbolTable(): SymbolTable
    + setSymbolTable(symbolTable: SymbolTable): void
    + getStudentNode(): Node
    + setStudentNode(node: Node): void
    + getInstructorNode(): Node
    + setInstructorNode(node: Node): void
    + getSubtree(): List<Node>
    + setSubtree(list: List<Node>): void
}

class SymbolTable {
    Holds all potential mappings of pattern nodes to source nodes.
    ==
    .. Fields ..
    - table: Map<Symbol, Symbol>
    - symbolTable: Map<String, Symbol>
    .. Methods ..
    + merge(SymbolTable) -> SymbolTable
    + addSymbol(key: String, value: Symbol): void
    + getSymbolDataType(key: String): Type
    + getSymbolName(key: String): SimpleName
    + getSymbolValue(key: String): Expression
}

class Symbol {
    Represents a single Java symbol, such as an identifier or literal.
    ==
    .. Fields ..
    - name: SimpleName
    - dataType: Type
    - value: Expression
    - identifierType: IdentifierType
    .. Methods ..
    + Symbol(Node)
    + match(Symbol): boolean
    + getName(): SimpleName
    + getDataType(): Type
    + getValue(): Expression
    + setName(name: SimpleName): void
    + setDataType(dataType: Type): void
    + setValue(value: Expression): void
}

enum IdentifierType {
    Represents the possible patterns programmable by the instructor.
    Wrap in single underscores for SYMBOL,
    Wrap in double underscores for EXPRESSION,
    Triple underscore for WILD_CARD
    ==
    .. Values ..
    NONE
    SYMBOL
    EXPRESSION
    WILD_CARD
    .. Static methods ..
    + identify(lexeme: String): IdentifierType
}

CAIT --> TreeMatcher
TreeMatcher --> Match
TreeMatcher --> SymbolTable
SymbolTable --> Match
SymbolTable o--> Symbol
Match --> IdentifierType

@enduml