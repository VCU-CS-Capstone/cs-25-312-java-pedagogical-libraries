@startuml CAIT

title "CAIT (Capturing AST-Included Trees)"

left to right direction

class CAIT {
    Instructor-facing wrapper for internal CAIT methods.
    Defers most of its functionality to TreeMatcher.
    Also contains methods for parsing Strings into JavaParser Nodes.
    ==
    .. Static methods ..
    + parseFile(fileText: String) -> Node
    + parseFile(filePath: Path) -> Node
    + parseSource(source: String) -> Node
    + findMatches(pattern: String, source: String) -> List<Node>
}

class TreeMatcher {
    Drives the AST matching algorithm.
    Can shallow match (attributes only) or deep match (recursive descent).
    ==
    .. Methods ..
    + findMatches(node1: Node, node2: Node) -> List<Match>
    + shallowMatch(node1: Node, node2: Node) -> boolean
    + deepMatch(node1: Node, node2: Node) -> List<Match>
}

class Match {
    Represents one possible mapping of the pattern node to the source node.
    ==
    .. Fields ..
    - studentNode: Node
    - instructorNode: Node
    - symbolTable: SymbolTable
}

class SymbolTable {
    Holds all potential mappings of pattern nodes to source nodes.
    ==
    .. Fields ..
    - table: Map<Symbol, Symbol>
    .. Methods ..
    + merge(other: SymbolTable) -> SymbolTable
    + addSymbol(key: String, value: Symbol) -> void
    + getSymbolDataType(key: String) -> Type
    + getSymbolName(key: String) -> SimpleName
    + getSymbolValue(key: String) -> Expression
}

class InstructorSymbolTable extends SymbolTable {
    Adds one-to-many mapping utilities.
    ==
    .. Fields ..
    - instructorToStudentMapping: Map<String, Map<String, Symbol>>
    .. Methods ..
    + addStudentSymbol(instructorKey: String, studentKey: String, studentSymbol: Symbol) -> void
    + lookupStudentSymbol(instructorKey: String, studentKey: String) -> Symbol
    + mergeInstructorTable(other: InstructorSymbolTable) -> void
    + hasConflict(instructorKey: String, studentKey: String) -> boolean
}

class ScopedSymbolTable extends SymbolTable {
    Additionally tracks scope of nodes.
    ==
    .. Fields ..
    - scopes: Map<String, SymbolTable>
    .. Methods ..
    + addScope(scopeName: String) -> void
    + getScope(scopeName: String) -> SymbolTable
    + lookup(key: String, scopeName: String) -> Symbol
}

class Symbol {
    Represents a single Java symbol, such as an identifier or literal.
    ==
    .. Fields ..
    - name: SimpleName
    - dataType: Type
    - value: Expression
    - identifierType: IdentifierType
    .. Methods ..
    + Symbol(sourceNode: Node)
    + match(other: Symbol): boolean
}

enum IdentifierType {
    Represents the possible patterns usable by the instructor.
    ==
    .. Values ..
    NONE
    SYMBOL
    EXPRESSION
    WILD_CARD
    .. Static methods ..
    + identify(lexeme: String): IdentifierType
}

CAIT --> TreeMatcher
TreeMatcher --> Match
TreeMatcher -> SymbolTable
SymbolTable --> Match
Symbol <-- SymbolTable
Symbol -> IdentifierType

@enduml